#GP(SECURITY)

#GI(SPRING_BEANS, "Value")
#GI(SPRING_CONTEXT_ANNOTATION, "Bean")
#GI(SPRING_CONTEXT_ANNOTATION, "Configuration")
#GI(SPRING_CORE_ANNOTATION, "Order")
#GI(SPRING_LANG, "NonNull")

#GI(SPRING_SECURITY_AUTHENTICATION, "AuthenticationManager")
#GI(SPRING_SECURITY_CONFIG, "Customizer")
#GI(SPRING_SECURITY_CONFIG_ANNOTATION_AUTHENTICATION_CONFIGURATION, "AuthenticationConfiguration")
#GI(SPRING_SECURITY_CONFIG_ANNOTATION_WEB_BUILDERS, "HttpSecurity")
#GI(SPRING_SECURITY_CONFIG_ANNOTATION_WEB_CONFIGURATION, "EnableWebSecurity")
#GI(SPRING_SECURITY_CONFIG_ANNOTATION_WEB_CONFIGURERS, "AbstractHttpConfigurer")
#GI(SPRING_SECURITY_CONFIG_ANNOTATION_WEB_CONFIGURERS, "HeadersConfigurer")
#GI(SPRING_SECURITY_CONFIG_HTTP, "SessionCreationPolicy")
#GI(SPRING_SECURITY_CORE_USERDETAILS, "User")
#GI(SPRING_SECURITY_CRYPTO_PASSWORD, "PasswordEncoder")
#GI(SPRING_SECURITY_PROVISIONING, "InMemoryUserDetailsManager")
#GI(SPRING_SECURITY_WEB, "SecurityFilterChain")
#GI(SPRING_SECURITY_WEB_AUTHENTICATION, "UsernamePasswordAuthenticationFilter")

#GI(SPRING_WEB_SERVLET_CONFIG_ANNOTATION, "CorsRegistry")
#GI(SPRING_WEB_SERVLET_CONFIG_ANNOTATION, "WebMvcConfigurer")

#GI(APP_SERVICE, "user.UserService")
#GI(APP_UTILS, "AppUtil")

@EnableWebSecurity
@Configuration
public class SpringSecurityConfig {
	@Value("${device.user-name}")
	private String deviceUserName;
	@Value("${device.password}")
	private String devicePassword;
	private final UserService userService;
	private final JwtFilter jwtFilter;
    private final CustomAuthenticationEntryPoint customAuthenticationEntryPoint;
	private static final String[] EXCLUDED_URLS = { "/auth/**", "/v3/api-docs/**", "/swagger-ui.html", "/swagger-ui/**", "/api/external/**"};
	
	public SpringSecurityConfig(UserService userService, JwtFilter jwtFilter, CustomAuthenticationEntryPoint customAuthenticationEntryPoint) {
		this.jwtFilter = jwtFilter;
		this.userService = userService;
		this.customAuthenticationEntryPoint = customAuthenticationEntryPoint;
	}
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		return http
			.cors(Customizer.withDefaults())
			.csrf(AbstractHttpConfigurer::disable)
			.headers(headers -> headers.frameOptions(HeadersConfigurer.FrameOptionsConfig::disable))
			.authorizeHttpRequests(req -> 
				req.requestMatchers(EXCLUDED_URLS)
				.permitAll()
				.anyRequest()
				.authenticated())
			.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
			.userDetailsService(userService)
			.exceptionHandling(handling -> handling.authenticationEntryPoint(customAuthenticationEntryPoint))
			.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)
			.build();
	}
	
	@Bean
	@Order(1)
	public SecurityFilterChain apiFilterChain(HttpSecurity http) throws Exception {
		http
			.securityMatcher("/api/external/**")
			.csrf(AbstractHttpConfigurer::disable)
			.authorizeHttpRequests(authorize -> authorize
				.anyRequest().authenticated()
			)
			.userDetailsService(new InMemoryUserDetailsManager(User.withUsername(deviceUserName).password(devicePassword).build()))
			.httpBasic(Customizer.withDefaults());
		return http.build();
	}
	
	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
		return configuration.getAuthenticationManager();
	}
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return AppUtil.getPasswordEncoder();
	}
	
	@Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(@NonNull CorsRegistry registry) {
                registry.addMapping("/**")
                        .allowedOrigins("http://localhost:4200", "http://localhost")
                        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                        .allowCredentials(true);
            }
        };
    }
}
