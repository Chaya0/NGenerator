#GP(SECURITY)

#GI(SPRING_BEANS, "Value")
#GI(SPRING_CONTEXT_ANNOTATION, "Bean")
#GI(SPRING_CONTEXT_ANNOTATION, "Configuration")
#GI(SPRING_CORE_ANNOTATION, "Order")
#GI(SPRING_LANG, "NonNull")

#GI(SPRING_SECURITY_CONFIG_ANNOTATION_WEB_CONFIGURERS, "HeadersConfigurer")
#GI(SPRING_SECURITY_PROVISIONING, "InMemoryUserDetailsManager")
#GI(SPRING_SECURITY_CORE_USERDETAILS, "User")
#GI(SPRING_SECURITY_AUTHENTICATION, "AuthenticationManager")
#GI(SPRING_SECURITY_CONFIG, "Customizer")
#GI(SPRING_SECURITY_CONFIG_ANNOTATION_AUTHENTICATION_CONFIGURATION, "AuthenticationConfiguration")
#GI(SPRING_SECURITY_CONFIG_ANNOTATION_WEB_BUILDERS, "HttpSecurity")
#GI(SPRING_SECURITY_CONFIG_ANNOTATION_WEB_CONFIGURATION, "EnableWebSecurity")
#GI(SPRING_SECURITY_CONFIG_ANNOTATION_WEB_CONFIGURERS, "AbstractHttpConfigurer")
#GI(SPRING_SECURITY_CONFIG_HTTP, "SessionCreationPolicy")
#GI(SPRING_SECURITY_CRYPTO_BCRYPT, "BCryptPasswordEncoder")
#GI(SPRING_SECURITY_CRYPTO_PASSWORD, "PasswordEncoder")
#GI(SPRING_SECURITY_WEB, "SecurityFilterChain")
#GI(SPRING_SECURITY_WEB_AUTHENTICATION, "UsernamePasswordAuthenticationFilter")
#GI(SPRING_WEB_CORS, "CorsConfiguration")
#GI(SPRING_WEB_CORS, "CorsConfigurationSource")
#GI(SPRING_WEB_CORS_REACTIVE, "UrlBasedCorsConfigurationSource")

#GI(SPRING_WEB_SERVLET_CONFIG_ANNOTATION, "CorsRegistry")
#GI(SPRING_WEB_SERVLET_CONFIG_ANNOTATION, "WebMvcConfigurer")

#GI(APP_SERVICE, "user.UserService")
#GI(APP_UTILS, "AppUtil")

@EnableWebSecurity
@Configuration
public class SpringSecurityConfig {
	private final UserService userService;
	private final JwtFilter jwtFilter;
	private static final String[] EXCLUDED_URLS = { "/auth/**", "/v3/api-docs/**", "/swagger-ui.html", "/swagger-ui/**" };

	public SpringSecurityConfig(UserService userService, JwtFilter jwtFilter) {
		this.jwtFilter = jwtFilter;
		this.userService = userService;
	}

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		return http
				.cors(Customizer.withDefaults())
				.csrf(AbstractHttpConfigurer::disable)
				.authorizeHttpRequests(req -> 
					req.requestMatchers(EXCLUDED_URLS)
					.permitAll()
					.anyRequest()
					.authenticated())
				.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
				.userDetailsService(userService)
				.httpBasic(Customizer.withDefaults())
				.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)
				.build();
	}

	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
		return configuration.getAuthenticationManager();
	}


	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.addAllowedOriginPattern("*"); // Allow all origins
        configuration.addAllowedMethod("*"); // Allow all HTTP methods
        configuration.addAllowedHeader("*"); // Allow all headers
        configuration.setAllowCredentials(true); // Allow credentials

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration); // Apply to all endpoints

        return (CorsConfigurationSource) source;
    }
}
