#GP(CONTROLLER, "auth")

#GI(APP_SECURITY, "JwtUtil")
#GI(APP_DTO, "GenericResponse")
#GI(APP_DTO, "LoginRequest")
#GI(APP_DTO, "UserDataDTO")
#GI(APP_EXCEPTION)
#GI(APP_MODEL, "User")
#GI(APP_SERVICE, "user.UserService")

#GI(SPRING_SERVLET_HTTP, "HttpServletResponse")
#GI(SPRING_HTTP, "ResponseEntity")
#GI(SPRING_HTTP, "ResponseCookie")

#GI(SPRING_SECURITY_AUTHENTICATION)
#GI(SPRING_SECURITY_CORE)
#GI(SPRING_SECURITY_CORE_USERDETAILS, "UserDetails")
#GI(SPRING_WEB_BIND_ANNOTATION)

@RestController
@CrossOrigin
@RequestMapping("/auth")
public class AuthController {
    private final AuthenticationManager authenticationManager;
    private final JwtUtil jwtUtil;
    private final UserService service;

    public AuthController(AuthenticationManager authenticationManager, JwtUtil jwtUtil, UserService service) {
        this.authenticationManager = authenticationManager;
        this.jwtUtil = jwtUtil;
        this.service = service;
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest) {
        try {
            // Authenticate the user
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));
            
            UserDetails userDetails = (UserDetails) authentication.getPrincipal();

            // Generate JWT tokens
            String jwt = jwtUtil.generateToken(userDetails.getUsername());
            String refreshToken = jwtUtil.generateRefreshToken(userDetails.getUsername());

            // Fetch user details
            User user = userService.findByUsername(userDetails.getUsername());
            UserDataDTO userData = new UserDataDTO(user.getUsername(), user.getRole().getPermissionList().stream()
                    .map(role -> role.getAuthority()).toList(), jwt, refreshToken);

            // Return the JWT inside UserDataDTO
            return ResponseEntity.ok(GenericResponse.getSuccessfulResponse(userData));
        } catch (Exception e) {
            throw new BadCredentialsException("Invalid username or password");
        }
    }

    @PostMapping("/refresh-token")
    public ResponseEntity<?> refreshToken(@RequestBody String refreshToken) {
        if (refreshToken == null || jwtUtil.isTokenExpired(refreshToken)) {
            return ResponseEntity.status(401).body(GenericResponse.getErrorResponse("401", "Refresh token expired!"));
        }

        // Generate a new JWT based on the refresh token
        String newJwt = jwtUtil.refreshToken(refreshToken);
        User user = userService.findByUsername(jwtUtil.extractUsername(refreshToken));
        
        UserDataDTO userData = new UserDataDTO(user.getUsername(), user.getRole().getPermissionList().stream()
                .map(role -> role.getAuthority()).toList(), newJwt, refreshToken);

        // Return the new JWT inside UserDataDTO
        return ResponseEntity.ok(GenericResponse.getSuccessfulResponse(userData));
    }
}