package com.generator.writer.java.specification;

import com.generator.writer.utils.GeneratorOutputFile;
import com.generator.writer.utils.WriterUtils;

public class JavaJoinRootWriter {
	public void create() throws Exception {
        try (GeneratorOutputFile file = WriterUtils.getOutputResource(WriterUtils.getSpecificationPackagePath(), "LogicalOperator.java", false)) {
            if (file.hasAlreadyExisted()) {
                return;
            }

            file.writeln(0, "package " + WriterUtils.getSpecificationPackageImportPath() + ";");
			file.writeln(0, "");
			file.writeln(0, "import jakarta.persistence.criteria.*;");
			file.writeln(0, "import jakarta.persistence.metamodel.*;");
			file.writeln(0, "");
			file.writeln(0, "import java.util.Collection;");
			file.writeln(0, "import java.util.List;");
			file.writeln(0, "import java.util.Map;");
			file.writeln(0, "import java.util.Set;");
			file.writeln(0, "");
			file.writeln(0, "public class JoinRoot<T> implements Root<T> {");
			file.writeln(1, "private final Join<?, T> join;");
			file.writeln(0, "");
			file.writeln(1, "public JoinRoot(Join<?, T> join) {");
			file.writeln(2, "this.join = join;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public EntityType<T> getModel() {");
			file.writeln(2, "// this one is the only one that cannot be delegated, although it's not used in my use case");
			file.writeln(2, "throw new UnsupportedOperationException(\"getModel cannot be delegated to a JoinRoot\");");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Path<?> getParentPath() {");
			file.writeln(2, "return this.join.getParentPath();");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> Path<Y> get(SingularAttribute<? super T, Y> attribute) {");
			file.writeln(2, "return this.join.get(attribute);");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <E, C extends Collection<E>> Expression<C> get(PluralAttribute<T, C, E> collection) {");
			file.writeln(2, "return this.join.get(collection);");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <K, V, M extends Map<K, V>> Expression<M> get(MapAttribute<T, K, V> map) {");
			file.writeln(2, "return this.join.get(map);");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Expression<Class<? extends T>> type() {");
			file.writeln(2, "return this.join.type();");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> Path<Y> get(String attributeName) {");
			file.writeln(2, "return this.join.get(attributeName);");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Set<Join<T, ?>> getJoins() {");
			file.writeln(2, "return this.join.getJoins();");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public boolean isCorrelated() {");
			file.writeln(2, "return this.join.isCorrelated();");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "@SuppressWarnings(\"unchecked\")");
			file.writeln(1, "public From<T, T> getCorrelationParent() {");
			file.writeln(2, "return (From<T, T>) this.join.getCorrelationParent();");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> Join<T, Y> join(SingularAttribute<? super T, Y> attribute) {");
			file.writeln(2, "return this.join.join(attribute);");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> Join<T, Y> join(SingularAttribute<? super T, Y> attribute, JoinType jt) {");
			file.writeln(2, "return this.join.join(attribute, jt);");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> CollectionJoin<T, Y> join(CollectionAttribute<? super T, Y> collection) {");
			file.writeln(2, "return this.join.join(collection);");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> SetJoin<T, Y> join(SetAttribute<? super T, Y> set) {");
			file.writeln(2, "return this.join.join(set);");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> ListJoin<T, Y> join(ListAttribute<? super T, Y> list) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <K, V> MapJoin<T, K, V> join(MapAttribute<? super T, K, V> map) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> CollectionJoin<T, Y> join(CollectionAttribute<? super T, Y> collection, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> SetJoin<T, Y> join(SetAttribute<? super T, Y> set, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> ListJoin<T, Y> join(ListAttribute<? super T, Y> list, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <K, V> MapJoin<T, K, V> join(MapAttribute<? super T, K, V> map, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, Y> Join<X, Y> join(String attributeName) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, Y> CollectionJoin<X, Y> joinCollection(String attributeName) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, Y> SetJoin<X, Y> joinSet(String attributeName) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, Y> ListJoin<X, Y> joinList(String attributeName) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, K, V> MapJoin<X, K, V> joinMap(String attributeName) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, Y> Join<X, Y> join(String attributeName, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, Y> CollectionJoin<X, Y> joinCollection(String attributeName, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, Y> SetJoin<X, Y> joinSet(String attributeName, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, Y> ListJoin<X, Y> joinList(String attributeName, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, K, V> MapJoin<X, K, V> joinMap(String attributeName, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Set<Fetch<T, ?>> getFetches() {");
			file.writeln(2, "return Set.of();");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> Fetch<T, Y> fetch(SingularAttribute<? super T, Y> attribute) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> Fetch<T, Y> fetch(SingularAttribute<? super T, Y> attribute, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> Fetch<T, Y> fetch(PluralAttribute<? super T, ?, Y> attribute) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <Y> Fetch<T, Y> fetch(PluralAttribute<? super T, ?, Y> attribute, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, Y> Fetch<X, Y> fetch(String attributeName) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public <X, Y> Fetch<X, Y> fetch(String attributeName, JoinType jt) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Predicate isNull() {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Predicate isNotNull() {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Predicate in(Object... values) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Predicate in(Expression<?>... values) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Predicate in(Collection<?> values) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Predicate in(Expression<Collection<?>> values) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "<X> Expression<X> as(Class<X> type) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Selection<T> alias(String name) {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public boolean isCompoundSelection() {");
			file.writeln(2, "return false;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public List<Selection<?>> getCompoundSelectionItems() {");
			file.writeln(2, "return List.of();");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public Class<? extends T> getJavaType() {");
			file.writeln(2, "return null;");
			file.writeln(1, "}");
			file.writeln(0, "");
			file.writeln(1, "@Override");
			file.writeln(1, "public String getAlias() {");
			file.writeln(2, "return \"\";");
			file.writeln(1, "}");
			file.writeln(0, "}");
		} 
	}
}
